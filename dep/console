#!/bin/bash

# dependencies #

# usage #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

stamp=$(date +"%m-%d-%Y-%H-%M-%S")

# colors #

if [ -z "$(command -v tput)" ]
then
	if [[ -t 1 ]]
	then
		black=$(echo -e \\e\[30m)
		red=$(echo -e \\e\[31m)
		green=$(echo -e \\e\[32m)
		yellow=$(echo -e \\e\[33m)
		blue=$(echo -e \\e\[34m)
		magenta=$(echo -e \\e\[35m)
		cyan=$(echo -e \\e\[36m)
		white=$(echo -e \\e\[97m)
		reset=$(echo -e \\e\[39m)
	fi
else
	if [[ -t 1 ]]
	then
		black=$(tput setaf 0)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput setaf 3)
		blue=$(tput setaf 4)
		magenta=$(tput setaf 5)
		cyan=$(tput setaf 6)
		white=$(tput setaf 7)
		reset=$(tput sgr0)
	fi
fi

# symbols #

# markers

marker_maru='[ ○ ]'
marker_batsu='[ ⨉ ]'
marker_bako='[ □ ]'
marker_sankaku='[ △ ]'

marker_top='[ ⋀ ]'
marker_bot='[ ⋁ ]'

marker_fwd='[ > ]'
marker_rev='[ < ]'
marker_stp='[ / ]'

marker_add='[ + ]'
marker_rem='[ - ]'

marker_ask='[ ? ]'
marker_inf='[ i ]'
marker_ipt='[ ± ]'
marker_msg='[ ¤ ]'
marker_wrn='[ ! ]'
marker_usr='[ • ]'

marker_yes='[ ✓ ]'
marker_no='[ ⨉ ]'

# highlights #

console.red () {
	echo -e "${red}"$@"${reset}"
}

console.green () {
	echo -e "${green}"$@"${reset}"
}

console.yellow () {
	echo -e "${yellow}"$@"${reset}"
}

console.blue () {
	echo -e "${blue}"$@"${reset}"
}

console.magenta () {
	echo -e "${magenta}"$@"${reset}"
}

console.cyan () {
	echo -e "${cyan}"$@"${reset}"
}

# prompts #

console.maru () {
	echo -e "${green}${marker_maru}" $@"${reset}"
}

console.batsu () {
	echo -e "${red}${marker_batsu}" $@"${reset}"
}

console.bako () {
	echo -e "${white}${marker_bako}" $@"${reset}"
}

console.sankaku () {
	echo -e "${cyan}${marker_sankaku}" $@"${reset}"
}

console.ask () {
	echo -e "${magenta}${marker_ask}" $@"${reset}"
}

console.inf() {
	echo -e "${blue}${marker_inf}" $@"${reset}"
}

console.msg () {
	echo -e "${cyan}${marker_msg}" $@"${reset}"
}

console.wrn () {
	echo -e "${yellow}${marker_wrn}" $@"${reset}"
}

console.usr () {
	echo -e "${magenta}${marker_usr}" $@"${reset}"
}

console.add () {
	echo -e "${blue}${marker_add}" $@"${reset}"
}

console.rem () {
	echo -e "${red}${marker_rem}" $@"${reset}"
}

console.fwd () {
	echo -e "${white}${marker_fwd}" $@"${reset}"
}

console.rev () {
	echo -e "${white}${marker_rev}" $@"${reset}"
}

console.stp () {
	echo -e "${white}${marker_stp}" $@"${reset}"
}

console.dwn () {
	echo -e "${magenta}${marker_bot}" $@"${reset}"
}

console.upl () {
	echo -e "${magenta}${marker_top}" $@"${reset}"
}

console.scs () {
	echo -e "${green}${marker_yes}" $@"${reset}"
}

console.err () {
	echo -e "${red}${marker_no}" $@"${reset}"
}

console.ipt () {
	echo -n "${magenta}${marker_add}" $@"${reset}"
}

# triggers #

# countdown

console.countdown () {
	message="$1"
	seconds="$2"
	
	shift

	while [ "${seconds}" -gt 0 ]
	do
		echo -e "\r${marker_wrn} ${message} [ ${red}$((seconds--))${reset} ] seconds...\c"
		
		sleep 1
	done
	
	# additional 'echo' required due to carriage return

	echo
}

# spinner

console.spin () {
	# catch PID of last command

	PID=$!

	spinner="+×"
	before="[ "
	after="]"

	message="$1"

	i=1

	while [ -d /proc/"${PID}" ]
	do
		echo -ne "\r${before} \b${spinner:i++%${#spinner}:1} ${after} ${message}\c "
		
		sleep 0.175
	done
	
	# additional 'echo' required due to carriage return
	
	echo
}

# handlers #

# directory

console.directory () {
	directory="$1"
	path="$2"
	
	console.add "Creating directory [ ${directory} ]."
	echo

	# create directory and set permissions

	[ ! -d "${path}"/"${directory}" ] && mkdir -p "${path}"/"${directory}" || :
	
	# set ownership
	
	chown ${uid}:${gid} -R "${path}"/"${directory}"
}

# download

console.download () {
	source="$1"
	path="$2"
	
	# $3 - array
	
	data=(${@:3}) 
	
	# downloads_list is declared as an array prior to download request
	
	for file in ${data[@]}
	do
		curl -sL "${source}/${file}" > "${path}"/"${file}"
	
		console.dwn "Downloading [ ${file} ]."
		echo
	
		chmod a+rx "${path}"/"${file}"

	done
}

# upload

console.upload () {

	console.upl "Uploading [ ${file} ]."
	echo

}

# get

console.get () {
	source="$1"
	file="$2"
	path="$3"
	
	curl -sL "${source}/${file}" > "${path}"/"${file}"

	console.dwn "Downloading [ ${file} ]."
	echo
	
	chmod a+rx "${path}"/"${file}"
}

# silence

console.silence () {
	command="$@"
	
	"${SHELL}" -c "${command}" >> "${PREFIX}"/var/log/"${script}"-"${stamp}".log 2>&1
}

# input

console.input () {
values_list=($@)

for value in "${values_list[@]}"
do
	label=${value^}
	prompt="$(echo ${label} | sed 's/_/ /'): "
	
	console.ipt "${prompt}"
	read input
	
	# prevent empty input
	
	while true
		do
			if [ -z "$input" ]
			then
				echo
				console.err "${label} cannot be empty:"
				console.wrn "${label} ${message}"
				echo
			
				console.ipt "${prompt}"
				read input
	
			else
				break
			fi
		done
	
	rtn+=("$value=$input")
done

}