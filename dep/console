#!/bin/bash

# dependencies #

# usage #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

stamp=$(date +"%m-%d-%Y-%H-%M-%S")

# colors #

if [ -z $(command -v tput) ]
then
	if [[ -t 1 ]]
	then
		black=$(echo -e \\e\[30m)
		red=$(echo -e \\e\[31m)
		green=$(echo -e \\e\[32m)
		yellow=$(echo -e \\e\[33m)
		blue=$(echo -e \\e\[34m)
		magenta=$(echo -e \\e\[35m)
		cyan=$(echo -e \\e\[36m)
		white=$(echo -e \\e\[97m)
		reset=$(echo -e \\e\[39m)
	fi
else
	if [[ -t 1 ]]
	then
		black=$(tput setaf 0)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput setaf 3)
		blue=$(tput setaf 4)
		magenta=$(tput setaf 5)
		cyan=$(tput setaf 6)
		white=$(tput setaf 7)
		reset=$(tput sgr0)
	fi
fi

# symbols #

# markers

marker_maru='[ ○ ]'
marker_bako='[ □ ]'
marker_sankaku='[ △ ]'

marker_batsu='[ ⨉ ]'
marker_download='[ ⋁ ]'
marker_fwd='[ > ]'
marker_info='[ i ]'
marker_input='[ + ]'
marker_message='[ ¤ ]'
marker_no='[ ⨉ ]'
marker_question='[ ? ]'
marker_rev='[ < ]'
marker_stp='[ - ]'
marker_upload='[ ⋀ ]'
marker_warning='[ ! ]'
marker_yes='[ ✓ ]'
marker_choice='[ • ]'

# highlights #

# red

console.red () {
	echo "${red}"$@"${reset}"
}

# green

console.green () {
	echo "${green}"$@"${reset}"
}

# yellow

console.yellow () {
	echo "${yellow}"$@"${reset}"
}

# blue

console.blue () {
	echo "${blue}"$@"${reset}"
}

# magenta

console.magenta () {
	echo "${magenta}"$@"${reset}"
}

# cyan

console.cyan () {
	echo "${cyan}"$@"${reset}"
}

# prompts #

# marker_batsu

console.batsu () {
	echo "${red}${marker_batsu}" $@"${reset}"
}

# marker_download

console.down () {
	echo "${magenta}${marker_download}" $@"${reset}"
}

# marker_fwd

console.fwd () {
	echo "${white}${marker_fwd}" $@"${reset}"
}

# marker_info

console.info () {
	echo "${blue}${marker_info}" $@"${reset}"
}

# marker_input

console.in () {
	echo -n "${magenta}${marker_input}" $@"${reset}"
}

# marker_message

console.message () {
	echo "${cyan}${marker_message}" $@"${reset}"
}

# marker_maru

console.maru () {
	echo "${green}${marker_maru}" $@"${reset}"
}

# marker_no

console.error () {
	echo "${red}${marker_no}" $@"${reset}"
}

# marker_question

console.question () {
	echo "${magenta}${marker_question}" $@"${reset}"
}

# marker_rev

console.rev () {
	echo "${white}${marker_rev}" $@"${reset}"
}

# marker_sankaku

console.sankaku () {
	echo "${cyan}${marker_sankaku}" $@"${reset}"
}

# marker_stp

console.stp () {
	echo "${white}${marker_stp}" $@"${reset}"
}

# marker_upload

console.up () {
	echo "${magenta}${marker_upload}" $@"${reset}"
}

# marker_warning

console.warning () {
	echo "${yellow}${marker_warning}" $@"${reset}"
}

# marker_yes

console.success () {
	echo "${green}${marker_yes}" $@"${reset}"
}

# marker_choice

console.choice () {
	echo "${magenta}${marker_choice}" $@"${reset}"
}

# triggers #

# countdown

console.countdown () {
	message="$1"
	seconds="$2"
	
	shift

	while [ "${seconds}" -gt 0 ]
	do
		echo -e "\r${marker_warning} ${message} [ ${red}$((seconds--))${reset} ] seconds...\c"
		
		sleep 1
	done
	
	# additional 'echo' required due to carriage return

	echo
}

# spinner

console.spin () {
	# catch PID of last command

	PID=$!

	spinner="+×"
	before="[ "
	after="]"

	message="$1"

	i=1

	while [ -d /proc/"${PID}" ]
	do
		echo -ne "\r${before} \b${spinner:i++%${#spinner}:1} ${after} ${message}\c "
		
		sleep 0.175
	done
	
	# additional 'echo' required due to carriage return
	
	echo
}

# handlers #

# download

console.download () {
	source="$1"
	path="$2"
	
	# downloads_list is declared as an array prior to download request
	
	for file in ${downloads_list[@]}
	do
		curl -sL "${source}/${file}" > "${path}"/"${file}"
	
		console.down "Downloading [ ${file} ]."
		echo
	
		chmod +x "${path}"/"${file}"

	done
}

# get

console.get () {
	source="$1"
	file="$2"
	path="$3"
	
	curl -sL "${source}/${file}" > "${path}"/"${file}"

	console.down "Downloading [ ${file} ]."
	echo
	
	chmod +x "${path}"/"${file}"
}

# silence

console.silence () {
	command="$@"
	
	"${SHELL}" -c "${command}" >> "${PREFIX}"/var/log/"${script}"-"${stamp}".log 2>&1
}

# input

console.input () {
array="$1"

for value in "${array}"
do
	label=${value^}
	prompt="$(echo ${label} | sed 's/_/ /'): "
	
	console.in "${prompt}"
	read input
	
	# prevent empty input
	
	while true
		do
			if [ -z "$input" ]
			then
				echo
				console.error "${label} cannot be empty:"
				console.warning "${label} ${message}"
				echo
			
				console.in "${prompt}"
				read input
	
			else
				break
			fi
		done
	
	eval "$value"="$input"
done
}