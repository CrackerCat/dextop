#!/bin/bash

# author #

# Nathanel Titane - nathanel.titane@gmail.com

# linux-dextop # Termux // Dextop // Ubuntu #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")
version="10-10-2020"

# usage #

while (($#))
do
	case "$1" in
		-f|--full)
			install_option="full"
			;;
		-m|--minimal)
			install_option="minimal"
			;;
		-a|--applications)
			add_applications="yes"
			;;
		-n|--vnc)
			display_output="vnc"
			;;
		-x|--xorg)
			display_output="xorg"
			;;
		-h|--help)
			echo -e ""
			echo -e "USAGE:"
			echo -e ""
			echo -e "-f, --full \t Full setup: download and install full desktop environment and utilities."
			echo -e "-m, --minimal \t Minimal setup: download and install minimal desktop environment and utilities."
			echo -e ""
			echo -e "-a, --applications: Download a set of optimized and precompiled arm64 applications."
			echo -e ""
			echo -e "-n , --vnc: \t Download and setup vnc protocol display output. [ Default - vnc display when no option is selected ]"
			echo -e "-x , --xorg: \t Download and setup xorg/xrdp protocol display output."
			echo -e ""
			echo -e "-h, --help \t Show help and usage."
			echo -e "-v, --version \t Show ${script} version."
			echo -e ""
			exit
			;;
		-v|--version)
			echo -e ""
			echo -e "$script [ Version $version ]"
			echo -e ""
			exit
			;;
		*)
			echo -e ""
			echo "Usage: ${0} <install option> <display output>"
			echo -e ""
			echo -e "$script: Unknown option $1"
			echo -e "Type './$script --help' for help and usage information."
			echo -e ""
			exit 1
			;;
		esac
	shift
done

install_option=$1
display_output=$2
image_type=$3

# set defaults

[ -z $install_option ] && install_option="minimal"
[ -z $display_output ] && display_output="vnc"
[ -z $add_applications ] && add_applications="yes"

# set globals

SETUP_DIRECTORY="${PREFIX%/*}"
BINARIES_DIRECTORY="${PREFIX}"/bin

# dependencies #

# source

# explicit console.get for preload

curl -sL dep.dxtp.app/console > "$BINARIES_DIRECTORY"/console && source "$BINARIES_DIRECTORY"/console
curl -sL dep.dxtp.app/globals > "$BINARIES_DIRECTORY"/globals && source "$BINARIES_DIRECTORY"/globals

clear

# execute

console.fwd "Loading..."
echo

console.get dep.dxtp.app binaries "$BINARIES_DIRECTORY" && bash "$BINARIES_DIRECTORY"/binaries

clear

console.msg "[ Linux on Android -  Termux // Dextop // Ubuntu  [ Version ${version} ] ]"
echo

sleep 1

console.fwd "Initializing setup [ termux ]..."
echo

sleep 2

# setup #

# set work directory

console.inf "Entering setup directory."
echo

cd "${SETUP_DIRECTORY}" || exit 1


# verify architecture compatibility

"$BINARIES_DIRECTORY"/proot-architecture

# setup environments

console.fwd "Setting up environments [ [ termux <<< ] | [ >>> proot ] ]..."
echo

# get user information

"$BINARIES_DIRECTORY"/proot-information

# setup termux login messages

"$BINARIES_DIRECTORY"/termux-welcome

# setup transient storage - [ device <<>> [ termux <<>> [ proot ] ] ]

"$BINARIES_DIRECTORY"/termux-storage

# setup termux package requirements

"$BINARIES_DIRECTORY"/termux-packages

# download and unpack/setup image

"$BINARIES_DIRECTORY"/proot-image

# transfer unregsitered termux group IDs into proot

"$BINARIES_DIRECTORY"/termux-groups

# setup termux environment requirements

"$BINARIES_DIRECTORY"/termux-environment

# setup proot libraries preload for enhanced performance

"$BINARIES_DIRECTORY"/proot-libraries

# setup proot network requirements  - [ device <<>> [ termux <<>> [ proot ] ] ]

"$BINARIES_DIRECTORY"/proot-network

# setup proot system requirements

"$BINARIES_DIRECTORY"/proot-setup

# export #

cat << FILE >> "$BINARIES_DIRECTORY"/globals

# version #

export version=${version}

# options #

export install_option="${install_option}"
export display_output="${display_output}"
export add_applications="${add_applications}"
FILE

# cleanup #

# remove scripts

rm "$HOME"/setup || :

# automatic setup transition [ termux >>> [ proot ] ]

cat <<- 'FILE' >> "$PROOT_DIRECTORY"/root/.profile

bash /tmp/setup
FILE

# run 'proot-launch' as 'root'
# and carry over setup in proot environment

console.inf "Entering proot environment."
echo

sleep 1

"$BINARIES_DIRECTORY"/bash -c 'proot-launch'

clear
