#!/bin/bash

# Author: Nathanel Titane - nathanel.titane@gmail.com

# linux-dextop # Linux on Android # Termux Dextop // Ubuntu Dextop #

# usage #

while (($#))
do
	case "$1" in
		-b|--base)
			install_option="base"
			;;
		-f|--full)
			install_option="full"
			;;
		-m|--minimal)
			install_option="minimal"
			;;
		-c|--vnc)
			display_output="vnc"
			;;
		-x|--xorg)
			display_output="xorg"
			;;
		-h|--help)
			echo -e ""
			echo -e "USAGE:"
			echo -e ""
			echo -e "-b, --base \t Base setup: download and unpack root filesystem and utilities."
			echo -e "-f, --full \t Full setup: download and install full desktop environment and utilities."
			echo -e "-m, --minimal \t Minimal setup: download and install minimal set of utilities:."
			echo -e " \t\t Note:"
			echo -e " \t\t this option is ideal for running specific applications and their dependencies only."
			echo -e ""
			echo -e "-c , --vnc: \t Download and setup vnc protocol display output. [ Default - vnc display when no option is selected ]"
			echo -e "-x , --xorg: \t Download and setup xorg/xrdp protocol display output."
			echo -e ""
			echo -e "-h, --help \t Show help and usage."
			echo -e "-v, --version \t Show ${script} version."
			echo -e ""
			exit
			;;
		-v|--version)
			echo -e ""
			echo -e "$script $version"
			echo -e ""
			exit
			;;
		*)
			echo -e ""
			echo "Usage: ${0} <install option> <display output>"
			echo -e ""
			echo -e "$script: Unknown option $1"
			echo -e "Type './$script --help' for help and usage information."
			echo -e ""
			exit 1
			;;
		esac
	shift
done

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")
version="09-20-2020"

install_option=$1
display_output=$2

# set defaults

[ -z $install_option ] && install_option="minimal"
[ -z $display_output ] && display_output="vnc"

# set globals

SETUP_DIRECTORY="${PREFIX%/*}"
BINARIES_DIRECTORY="${PREFIX}"/bin

# dependencies #

curl -sL dep-dex.ntttn.me/dependencies > dependencies && bash dependencies

# set work directory

cd "${SETUP_DIRECTORY}" || exit 1

# initial prompt clear #

clear

# setup #

console.fwd "Downloading necessary binary files."
echo

"$BINARIES_DIRECTORY"/binaries

console.fwd "Setting up environments [ [ termux <<< ] | [ >>> proot ] ]..."
echo

"$BINARIES_DIRECTORY"/check-architecture

# get user information

"$BINARIES_DIRECTORY"/user-information

# setup transient storage - [ device <<>> [ termux <<>> [ proot ] ] ]

"$BINARIES_DIRECTORY"/termux-storage

# setup termux package requirements

"$BINARIES_DIRECTORY"/termux-packages

# download and unpack/setup image

"$BINARIES_DIRECTORY"/proot-image

# transfer unregsitered termux group IDs into proot

"$BINARIES_DIRECTORY"/termux-groups

# setup termux environment requirements

"$BINARIES_DIRECTORY"/termux-environment

# setup proot environment requirements

"$BINARIES_DIRECTORY"/proot-environment

# setup proot system requirements

"$BINARIES_DIRECTORY"/proot-setup

# export #

cat << FILE >> "$BINARIES_DIRECTORY"/globals

# options #

export install_option="${install_option}"
export display_output="${display_output}"
FILE

# cleanup #

# purge all setup traces:
# use BASH_SROUCE for all bash-specific invocations to the script path:
# $0 is POSIX compliant and may not always return the correct value.

rm "$INITIAL_DIRECTORY"/${BASH_SOURCE[0]}

# automatic proot setup transition:
# run 'proot-launch' as 'root'
# and carry over setup in proot environment

console.info "Entering proot environment."
echo

$BINARIES_DIRECTORY/bash -c 'proot-launch'
